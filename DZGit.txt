1. Создать внешний репозиторий c названием TXT.					mkdir DZ_Git; cd DZ_Git;  gh repo create TXT --public	(установив gitcli и авторизоваться)
 2. Клонировать репозиторий TXT на локальный компьютер.			 git clone git@github.com:Afoniazap/TXT.git
		
 3. Внутри локального TXT создать файл “new.txt”.	> new.txt 	cat > new.txt 	 touch new.txt 
 4. Добавить файл под гит.				add .	        add new.txt
 5. Закоммитить файл.					git commit -m "1"
 6. Отправить файл на внешний GitHub репозиторий.	git push	
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT. 	cat >> new.txt 	vim new.txt 		start new.txt (как вариант)
 8. Отправить изменения на внешний репозиторий.		git commit -am "AddFromMeonNew.txt" 
 9. Создать файл preferences.txt		> preferences.txt	
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT. start preferences.txt   	cat >> preferences.txt 		vim preferences
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT		cat > sklls.txt 	
 12. Сделать коммит в одну строку.			git commit - am "stroka"
 13. Отправить сразу 2 файла на внешний репозиторий.	git push
 14. На веб интерфейсе создать файл bug_report.txt.	в веб версии в репозитории TXT жмем add files    вводим название сверху bug_report.txt	
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.					нажимаем commit changes  подтверждаем комментарий к изменению 
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.		выбираем файл из списка нажимаем  edit file  редактируем 
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.					нажимаем commit changes  подтверждаем комментарий к изменению 
 18. Синхронизировать внешний и локальный репозиторий TXT						git pull

JSON		
 4. Создать внешний репозиторий c названием JSON.					gh repo create JSON --public
 5. Клонировать репозиторий JSON на локальный компьютер.				git clone git@github.com:Afoniazap/JSON.git
 6. Внутри локального JSON создать файл “new.json”.					> new.json
 7. Добавить файл под гит.								git add new.json
 8. Закоммитить файл.									git commit -m "new"
 9. Отправить файл на внешний GitHub репозиторий.					git push
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.        vim new.json		как вариант	 start new.json (у меня открывается в Visual studio code)  
 11. Отправить изменения на внешний репозиторий.					git commit -am "edit new"   git push			
 12. Создать файл preferences.json							> preferences.json		
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.		vim preferences.json		(можно сразу и создает и редактирует)     cat > preferences.json          
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON			vim sklls.json	
 15. Отправить сразу 2 файла на внешний репозиторий.				 git add . && git commit -m "n" && git push				
 16. На веб интерфейсе создать файл bug_report.json.				в веб версии в репозитории JSON жмем add files    вводим название сверху bug_report.json
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.		нажимаем commit changes  подтверждаем комментарий к изменению
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.			
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.					нажимаем commit changes  подтверждаем комментарий к изменению		
 20. Синхронизировать внешний и локальный репозиторий JSON						git pull


XML
 21. Создать внешний репозиторий c названием XML.				 gh repo create XML --public
 22. Клонировать репозиторий XML на локальный компьютер.			git clone git@github.com:Afoniazap/XML.git
 23. Внутри локального XML создать файл “new.xml”.				> XML/new.xml
 24. Добавить файл под гит.							cd xml ; git add new.xml ; git commit -m "one" ; git push			cd XML git add .
 25. Закоммитить файл.																commit -m "3"
 26. Отправить файл на внешний GitHub репозиторий.				git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.		 vim new.xml
 28. Отправить изменения на внешний репозиторий.				git commit -am "three" ; git push
 29. Создать файл preferences.xml						>preferences.xml 
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, стовыбираем файл из списка нажимаем  edit file  редактируемрона которую хотели бы посетить) в формате XML.										vim preferences.xml		
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML		vim sklls.xml
 32. Сделать коммит в одну строку.										git add preferences.xml sklls.xml && git commit -m "Добавлен"
 33. Отправить сразу 2 файла на внешний репозиторий.								git push
 34. На веб интерфейсе создать файл bug_report.xml.						в веб версии в репозитории XML жмем add files    вводим название сверху bug_report.xml
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.				нажимаем commit changes  подтверждаем комментарий к изменению
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.	выбираем файл из списка нажимаем  edit file  редактируем
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.				нажимаем commit changes  подтверждаем комментарий к изменению
 38. Синхронизировать внешний и локальный репозиторий XML					git pull