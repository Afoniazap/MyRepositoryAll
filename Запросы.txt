SELECT CustomerName,Price FROM [Customers] c
JOIN Orders o ON c.CustomerID = o.CustomerID
JOIN OrderDetails od ON od.OrderID = o.OrderID
JOIN Products p ON p.ProductID = od.ProductID
 <scrip>alert(44)</script>
по цепочке подкл таблицы и выводим необходимое

SELECT 'Customers' as TableName , City, CustomerName FROM [Customers]
UNION 
SELECT 'Suppliers' AS TableName, City, ContactName FROM Suppliers
ORDER BY TableName

обьединяем два запроса


SELECT c.* FROM Customers c
LEFT JOIN Orders o 
ON c.CustomerID = o.CustomerID
WHERE OrderID IS NULL


находим людей не сделавших заказ(OrderId IS NULL, IS NOT NULL сделавших)


SELECT ProductName AS "Продукты",Price AS "Цена", Price - Price*0.1 "цена со скидкой",SupplierName,City FROM Suppliers
a JOIN Products b ON a.SupplierID=b.SupplierID


делаем дополнительніе столбики со скидкой и обьединяем табл
SELECT ShipperName,SupplierName FROM Shippers s
JOIN Orders o ON s.ShipperID = o.OrderID
JOIN OrderDetails od ON o.OrderID = od.OrderID
JOIN Products p ON p.ProductID = od.ProductID
JOIN Suppliers s ON p.SupplierID = s.SupplierID

SELECT 'Shippers' as TableName, ShipperName  FROM Shippers
UNION
SELECT 'Suppliers' as TableName, SupplierName FROM Suppliers

НАЗІВАЕМ ИМЯ В СТОЛБИКЕ

SELECT ShipperName as Shippers FROM [Shippers]
UNION
SELECT SupplierName as Suppliers FROM Suppliers
ORDER BY Suppliers

SELECT имена_столбцов_таблицы_1, имена_столбцов_таблицы_2 FROM имя_таблицы_1, имя_таблицы_2;


SELECT e.EmployeeID,FirstName, COUNT (o.EmployeeID)
FROM Employees e
Join Orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID   //Запрос работников принявших заказі

SELECT e.EmployeeID,FirstName, COUNT (o.EmployeeID)
FROM Employees e
Join Orders o ON e.EmployeeID = o.EmployeeID
WHERE FirstName NOT IN ('Nancy','Andrew','Steven')
GROUP BY e.EmployeeID     //Запрос работников принявших заказі без некоторіх имен

SELECT e.EmployeeID,FirstName, COUNT (o.EmployeeID)
FROM Employees e
Join Orders o ON e.EmployeeID = o.EmployeeID
WHERE FirstName NOT IN ('Nancy','Andrew','Steven')
GROUP BY e.EmployeeID
HAVING COUNT (o.EmployeeID) > 15 //Запрос работников принявших заказі без некоторіх имен и с условием фильтром

SELECT e.EmployeeID, FirstName, COUNT(o.EmployeeID)
FROM Employees AS e
JOIN Orders o ON e.EmployeeID  = o.EmployeeID
WHERE FirstName NOT IN (SELECT FirstName FROM Employees WHERE EmployeeID IN (1,2,3,4,5))
GROUP BY e.EmployeeID
HAVING COUNT(o.EmployeeID) > 15  ////Запрос работников принявших заказі без некоторіх имен и с подзапросом

SELECT Address, SUM(Price) SUM 
FROM Suppliers s
Join Products p ON s.SupplierID = p.SupplierID
GROUP BY Address
HAVING AVG(Price) > 45

SELECT ProductName, Price From Products
Where Price > (Select AVG(Price) From Products)  //назв товара и цена больше средней

SELECT Count(Distinct ShipperID) from Orders  //кол-во перевозчиков


Select Count * from Shippers //кол-во перевозчиков

INSERT INTO Customers(CustomerName,Address,PostalCode)
 Values ('Иван', 'Винница', '353424'),('','','')  //добавляем 

Delete from Customers
where country = 'Mexico'    //удаляем

Delete from Customers
where country is null          

SELECT MAX(amount) FROM sales2005
Данный запрос вернет нам сумму 5000. Для того, чтобы понять кто из
сотрудников получает максимальную зарплату достаточно сделать:
SELECT person FROM sales2005 WHERE amount = 5000
Но в явном виде максимум неизвестен. Сегодня он 5000, а завтра уже
10000. Нужно универсальное решение, которого можно добиться с
помощью использования агрегтов:
SELECT person FROM sales2005
WHERE amount = (SELECT MAX(amount) FROM sales2005)
И получилось! Обратите внимание на синтаксис. Через подзапрос
мы достаём одиночное значение (5000), а дальше оно встаёт в
основной запрос. Таким образом, благодаря подзапросам, мы можем
использовать сколь угодно сложную логику.

Исходя из изученных нами положений, выведем общий синтаксис
запроса:
SELECT [DISTINCT] {список_вывода_через_запятую | *}
FROM таблица_1 AS псевдоним_1
[INNER/LEFT/RIGHT/FULL] JOIN таблица_2 AS псевдоним_2
ON псевдоним_1.поле_1 = псевдоним_2.поле_2
[INNER/LEFT/RIGHT/FULL] JOIN ... --- сколько угодно JOIN’ов
--- возможны множественные условия
--- с AND, OR, IN и т.д.

ON ... AND ...
WHERE условие_отбора_записей
GROUP BY поля_через_запятую
HAVING условие_отбора_групп --- с AND, OR, IN ит.д.
UNION / EXCEPT /INTERSECT --- если ведётся работа с множествами
SELECT .... -- новый запрос (множество) аналогично
...
ORDER BYполя_через_запятую